var fs = require('fs')
  , handlebars = require('handlebars')
  , basename = require('path').basename
  , uglify = require('uglify-js')
  , diveSync = require('diveSync');

exports.compile = function(opts) {

  var regex = /\.handlebars$/;
  if(opts.extensions) {
    regex = new RegExp('\.' + opts.extensions.join('$|\.') + '$');
  }

  console.log('[target] ' + opts.outfile);
  diveSync(opts.dir, function(err, file) {
    if (err) throw err;
    console.log('[compiling] ' + file);
    precompile({
      templates: [opts.dir],
      output: opts.outfile,
      fileRegex: regex,
      min: true
    });
  });
}

function precompile(opts) {

  (function(opts) {
    var template = [0];
    if (!opts.templates.length) {
      throw 'Must define at least one template or directory.';
    }

    opts.templates.forEach(function(template) {
      fs.statSync(template);
      try {
        fs.statSync(template);
      } catch (err) {
        throw 'Unable to open template file "' + template + '"';
      }
    });
  }(opts));

  var template = opts.templates[0];
  var output = [];
  output.push('(function() {\n  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};\n');

  function processTemplate(template, root) {
    var path = template,
        stat = fs.statSync(path);
    // make the filename regex user-overridable
    var fileRegex = /\.handlebars$/;
    if(opts.fileRegex) fileRegex = opts.fileRegex;

    if (stat.isDirectory()) {
      fs.readdirSync(template).map(function(file) {
        var path = template + '/' + file;
        if (fileRegex.test(path) || fs.statSync(path).isDirectory()) {
          processTemplate(path, root || template);
        }
      });
    } else {
      var data = fs.readFileSync(path, 'utf8');
      // Clean the template name
      if (!root) {
        template = basename(template);
      } else if (template.indexOf(root) === 0) {
        template = template.substring(root.length+1);
      }
      template = template.replace(fileRegex, '');
      output.push('templates[\'' + template + '\'] = template(' + handlebars.precompile(data, {}) + ');\n');
    }
  }

  // process each template
  opts.templates.forEach(function(template) {
    processTemplate(template, opts.root);
  });

  // output the content
  output.push('})();');
  output = output.join('');

  // uglify the content
  var ast = uglify.parser.parse(output);
  ast = uglify.uglify.ast_mangle(ast);
  ast = uglify.uglify.ast_squeeze(ast);
  output = uglify.uglify.gen_code(ast);

  // write the content
  fs.writeFileSync(opts.output, output, 'utf8');
}